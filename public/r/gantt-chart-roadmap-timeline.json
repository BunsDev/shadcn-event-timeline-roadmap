{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "gantt-chart-roadmap-timeline",
  "type": "registry:block",
  "title": "Gantt Chart Roadmap Timeline",
  "description": "shadcn/ui gantt chart roadmap and timeline block",
  "registryDependencies": [
    "badge",
    "tooltip",
    "dialog",
    "select",
    "progress",
    "separator",
    "scroll-area",
    "card"
  ],
  "files": [
    {
      "path": "src/app/gantt/page.tsx",
      "content": "\"use client\";\n\nimport {useState, useMemo, useRef, useCallback} from \"react\";\nimport {motion} from \"framer-motion\";\nimport {Download, ZoomIn, ZoomOut, Share2} from \"lucide-react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip as RechartsTooltip,\n  Legend,\n  AreaChart,\n  Area,\n} from \"recharts\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n} from \"@/components/ui/drawer\";\nimport {Button} from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {Progress} from \"@/components/ui/progress\";\nimport {Badge} from \"@/components/ui/badge\";\nimport {Separator} from \"@/components/ui/separator\";\nimport {ScrollArea} from \"@/components/ui/scroll-area\";\nimport {cn} from \"@/lib/utils\";\nimport {events} from \"@/data/events\";\nimport {useMediaQuery} from \"@/hooks/use-media-query\";\n\n// Define the enhanced types\ntype EnhancedEvent = {\n  title: string;\n  isChecked: boolean;\n  type?: string;\n  description: string;\n  assignee: string;\n  dependencies: string[];\n};\n\ntype EnhancedEvents = {\n  year: number;\n  periodType: \"Q\" | \"H\";\n  periodNumber: number;\n  isChecked: boolean;\n  events: EnhancedEvent[];\n};\n\n// Define the GanttChartRoadmap component\nexport default function GanttChartRoadmap() {\n  // State definitions\n  const [selectedEvent, setSelectedEvent] = useState<{\n    catIndex: number;\n    evtIndex: number;\n  } | null>(null);\n  const [filterType, setFilterType] = useState<string>(\"all\");\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [draggedEvent, setDraggedEvent] = useState<{\n    catIndex: number;\n    evtIndex: number;\n    newStart: number;\n  } | null>(null);\n  const chartRef = useRef<HTMLDivElement>(null);\n  const isMobile = useMediaQuery(\"(max-width: 768px)\");\n\n  // Color mappings for event types\n  const typeColors: { [key: string]: string } = {\n    Development: \"var(--chart-1)\",\n    Marketing: \"var(--chart-2)\",\n    Partnerships: \"var(--chart-3)\",\n    Security: \"var(--chart-4)\",\n    Deployment: \"var(--chart-5)\",\n    Community: \"var(--chart-1)\",\n    \"E-commerce\": \"var(--chart-2)\",\n  };\n\n  const inProgressColors: { [key: string]: string } = {\n    Development: \"oklch(0.75 0.15 41.116)\",\n    Marketing: \"oklch(0.70 0.08 184.704)\",\n    Partnerships: \"oklch(0.60 0.05 227.392)\",\n    Security: \"oklch(0.85 0.12 84.429)\",\n    Deployment: \"oklch(0.80 0.12 70.08)\",\n    Community: \"oklch(0.75 0.15 41.116)\",\n    \"E-commerce\": \"oklch(0.70 0.08 184.704)\",\n  };\n\n  // Memoized enhanced events with additional fields\n  const enhancedEvents: EnhancedEvents[] = useMemo(() => {\n    return events.map((period) => ({\n      ...period,\n      events: period.events.map((event) => ({\n        ...event,\n        description: `Details for ${event.title}`,\n        assignee: \"Team A\",\n        dependencies: event.title.includes(\"Phase 2\") ? [\"Phase 1\"] : [],\n      })),\n    }));\n  }, [events]); // Empty dependency since `events` is static\n\n  // Memoized categories based on filters\n  const categories = useMemo(() => {\n    const grouped: {\n      [key: string]: Array<{\n        title: string;\n        start: number;\n        end: number;\n        isChecked: boolean;\n        type: string;\n        description: string;\n        assignee: string;\n        dependencies: string[];\n      }>;\n    } = {};\n    enhancedEvents.forEach((period) => {\n      const periodStart =\n        period.year +\n        (period.periodType === \"Q\"\n          ? (period.periodNumber - 1) / 4\n          : (period.periodNumber - 1) / 2);\n      period.events.forEach((event) => {\n        if (!event.type) return;\n        if (\n          (filterType !== \"all\" && event.type !== filterType) ||\n          (filterStatus !== \"all\" &&\n            (filterStatus === \"completed\" ? !event.isChecked : event.isChecked))\n        )\n          return;\n        if (!grouped[event.type]) grouped[event.type] = [];\n        grouped[event.type].push({\n          title: event.title,\n          start: periodStart,\n          end: periodStart + 0.25,\n          isChecked: event.isChecked,\n          type: event.type,\n          description: event.description,\n          assignee: event.assignee,\n          dependencies: event.dependencies,\n        });\n      });\n    });\n    return grouped;\n  }, [enhancedEvents, filterType, filterStatus]);\n\n  // Memoized analytics data\n  const typeData = useMemo(() => {\n    const types = Object.keys(typeColors);\n    return types.map((type) => ({\n      name: type,\n      completed: Object.values(categories[type] || []).filter((e) => e.isChecked)\n        .length,\n      total: (categories[type] || []).length,\n    }));\n  }, [categories, typeColors]);\n\n  const densityData = useMemo(() => {\n    const periods: { [key: string]: number } = {};\n    enhancedEvents.forEach((period) => {\n      const periodKey = `${period.year} ${\n        period.periodType === \"Q\" ? `Q${period.periodNumber}` : `H${period.periodNumber}`\n      }`;\n      periods[periodKey] = period.events.length;\n    });\n    return Object.entries(periods).map(([name, events]) => ({name, events}));\n  }, [enhancedEvents]);\n\n  const totalEvents = Object.values(categories).reduce(\n    (sum, events) => sum + events.length,\n    0\n  );\n  const completedEvents = Object.values(categories).reduce(\n    (sum, events) => sum + events.filter((e) => e.isChecked).length,\n    0\n  );\n  const completionRate = totalEvents > 0 ? (completedEvents / totalEvents) * 100 : 0;\n\n  // Export data function\n  const exportData = useCallback((format: \"json\" | \"csv\") => {\n    const data = {typeData, densityData, categories};\n    if (format === \"json\") {\n      const blob = new Blob([JSON.stringify(data, null, 2)], {\n        type: \"application/json\",\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"gantt-roadmap-analytics.json\";\n      a.click();\n      URL.revokeObjectURL(url);\n    } else {\n      const csv = [\n        \"Category,Title,Start,End,Status\",\n        ...Object.entries(categories).flatMap(([category, events]) =>\n          events.map(\n            (event) =>\n              `${category},${event.title},${event.start},${event.end},${\n                event.isChecked ? \"Completed\" : \"In Progress\"\n              }`\n          )\n        ),\n      ].join(\"\\n\");\n      const blob = new Blob([csv], {type: \"text/csv\"});\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"gantt-roadmap-analytics.csv\";\n      a.click();\n      URL.revokeObjectURL(url);\n    }\n  }, [typeData, densityData, categories]);\n\n  // Share view function\n  const shareView = useCallback(() => {\n    const url = new URL(window.location.href);\n    url.searchParams.set(\"filterType\", filterType);\n    url.searchParams.set(\"filterStatus\", filterStatus);\n    navigator.clipboard.writeText(url.toString());\n    alert(\"View URL copied to clipboard!\");\n  }, [filterType, filterStatus]);\n\n  // Chart constants\n  const timeRange = [2021, 2030] as const;\n  const baseWidth = 800;\n  const timeScale = (baseWidth * zoomLevel) / (timeRange[1] - timeRange[0]);\n\n  // Selected event details\n  const selectedEventDetails =\n    selectedEvent !== null\n      ? categories[Object.keys(categories)[selectedEvent.catIndex]]?.[\n        selectedEvent.evtIndex\n        ]\n      : null;\n\n  return (\n    <TooltipProvider>\n      <div className=\"max-w-6xl mx-auto px-4 py-12 flex flex-col lg:flex-row gap-6\">\n        {/* Main Gantt Chart Section */}\n        <div className=\"flex-1\">\n          <motion.h1\n            className=\"text-3xl font-bold mb-2 text-foreground\"\n            initial={{opacity: 0, y: -20}}\n            animate={{opacity: 1, y: 0}}\n            transition={{duration: 0.5}}\n          >\n            Gantt Chart Roadmap\n          </motion.h1>\n          <motion.p\n            className=\"text-muted-foreground mb-6\"\n            initial={{opacity: 0}}\n            animate={{opacity: 1}}\n            transition={{duration: 0.5, delay: 0.2}}\n          >\n            A timeline of events by category\n          </motion.p>\n\n          {/* Controls */}\n          <div className=\"flex gap-4 mb-4 flex-wrap\">\n            <Select value={filterType} onValueChange={setFilterType}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter by Type\"/>\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                {Object.keys(typeColors).map((type) => (\n                  <SelectItem key={type} value={type}>\n                    {type}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter by Status\"/>\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"incomplete\">In Progress</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => setZoomLevel((prev) => Math.min(prev + 0.1, 2))}\n              aria-label=\"Zoom In\"\n            >\n              <ZoomIn className=\"h-4 w-4\"/>\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => setZoomLevel((prev) => Math.max(prev - 0.1, 0.5))}\n              aria-label=\"Zoom Out\"\n            >\n              <ZoomOut className=\"h-4 w-4\"/>\n            </Button>\n          </div>\n\n          {/* Legend */}\n          <div className=\"flex flex-wrap gap-4 mb-4\">\n            {Object.entries(typeColors).map(([type, color]) => (\n              <div key={type} className=\"flex items-center gap-2\">\n                <div\n                  className=\"w-4 h-4 rounded-[var(--radius-sm)] transition-colors\"\n                  style={{backgroundColor: color}}\n                />\n                <span className=\"text-sm text-muted-foreground\">{type}</span>\n              </div>\n            ))}\n          </div>\n\n          {/* Gantt Chart */}\n          <ScrollArea className=\"max-h-[600px] w-full\" ref={chartRef}>\n            <div className=\"relative\" style={{width: baseWidth * zoomLevel}}>\n              {/* Timeline Header */}\n              <div className=\"flex mb-2 sticky top-0 bg-card z-10 border-b border-border\">\n                {Array.from(\n                  {length: Math.ceil(timeRange[1] - timeRange[0])},\n                  (_, i) => timeRange[0] + i\n                ).map((year) => (\n                  <div\n                    key={year}\n                    className=\"flex-1 text-center text-sm text-muted-foreground py-2\"\n                  >\n                    {year}\n                  </div>\n                ))}\n              </div>\n              {/* Grid Lines */}\n              <div className=\"absolute top-0 left-0 h-full w-full pointer-events-none\">\n                {Array.from(\n                  {length: Math.ceil(timeRange[1] - timeRange[0])},\n                  (_, i) => timeRange[0] + i\n                ).map((year) => (\n                  <div\n                    key={year}\n                    className=\"absolute h-full border-l border-dashed border-border\"\n                    style={{left: `${(year - timeRange[0]) * timeScale}px`}}\n                  />\n                ))}\n              </div>\n              {/* Chart Content */}\n              <div className=\"relative bg-card border border-border rounded-[var(--radius-md)] p-4\">\n                {/* Dependency Lines */}\n                {Object.keys(categories).map((category, catIndex) =>\n                  categories[category].map((event, evtIndex) =>\n                    event.dependencies.map((dep, depIdx) => {\n                      const depEvent = categories[category].find(\n                        (e) => e.title === dep\n                      );\n                      if (!depEvent) return null;\n                      const depLeft = (depEvent.end - timeRange[0]) * timeScale;\n                      const eventLeft = (event.start - timeRange[0]) * timeScale;\n                      const yOffset = catIndex * 64 + 32;\n                      return (\n                        <svg\n                          key={`${catIndex}-${evtIndex}-dep-${depIdx}`}\n                          className=\"absolute pointer-events-none\"\n                          style={{\n                            left: 0,\n                            top: 0,\n                            width: baseWidth * zoomLevel,\n                            height: \"100%\",\n                          }}\n                        >\n                          <path\n                            d={`M ${depLeft} ${yOffset} H ${eventLeft} V ${yOffset}`}\n                            stroke=\"var(--muted-foreground)\"\n                            strokeWidth=\"1\"\n                            strokeDasharray=\"4\"\n                            fill=\"none\"\n                          />\n                        </svg>\n                      );\n                    })\n                  )\n                )}\n                {/* Event Rows */}\n                {Object.keys(categories).map((category, catIndex) => (\n                  <div\n                    key={category}\n                    className=\"flex items-center h-16 border-b border-border last:border-b-0\"\n                  >\n                    <div className=\"w-32 text-sm font-medium text-card-foreground shrink-0\">\n                      {category}\n                    </div>\n                    <div className=\"relative flex-1 h-full\">\n                      {categories[category].map((event, evtIndex) => {\n                        const totalChartWidth = baseWidth * zoomLevel;\n                        const leftUnclamped =\n                          (event.start - timeRange[0]) * timeScale;\n                        const rightUnclamped =\n                          (event.end - timeRange[0]) * timeScale;\n                        const widthUnclamped = rightUnclamped - leftUnclamped;\n\n                        let left = Math.max(0, leftUnclamped);\n                        let width = widthUnclamped;\n\n                        if (rightUnclamped > totalChartWidth) {\n                          width = totalChartWidth - left;\n                        }\n                        if (width <= 0 || left >= totalChartWidth) return null;\n\n                        const minWidth = 4;\n                        if (width < minWidth) {\n                          width = minWidth;\n                          if (left + width > totalChartWidth) {\n                            left = totalChartWidth - width;\n                          }\n                        }\n\n                        const isDragging =\n                          draggedEvent &&\n                          draggedEvent.catIndex === catIndex &&\n                          draggedEvent.evtIndex === evtIndex;\n                        const showLabel = width > 50;\n\n                        return (\n                          <Tooltip key={evtIndex}>\n                            <TooltipTrigger asChild>\n                              <motion.div\n                                className={cn(\n                                  \"absolute h-8 rounded-[var(--radius-xl)] mt-4 cursor-pointer shadow-md hover:ring-2 hover:ring-ring/50 flex items-center justify-start overflow-hidden transition-all\",\n                                  event.isChecked && \"text-card-foreground\"\n                                )}\n                                style={{\n                                  left: isDragging\n                                    ? `${draggedEvent.newStart}px`\n                                    : `${left}px`,\n                                  width: `${width}px`,\n                                  backgroundColor: event.isChecked\n                                    ? typeColors[category]\n                                    : inProgressColors[category],\n                                  minWidth: `${minWidth}px`,\n                                }}\n                                onMouseDown={(e) => {\n                                  const startX = e.clientX;\n                                  const initialLeft = left;\n                                  const onMouseMove = (moveEvent: MouseEvent) => {\n                                    const deltaX = moveEvent.clientX - startX;\n                                    const newLeft = Math.max(\n                                      0,\n                                      Math.min(\n                                        initialLeft + deltaX,\n                                        baseWidth * zoomLevel - width\n                                      )\n                                    );\n                                    setDraggedEvent({\n                                      catIndex,\n                                      evtIndex,\n                                      newStart: newLeft,\n                                    });\n                                  };\n                                  const onMouseUp = () => {\n                                    setDraggedEvent(null);\n                                    window.removeEventListener(\n                                      \"mousemove\",\n                                      onMouseMove\n                                    );\n                                    window.removeEventListener(\"mouseup\", onMouseUp);\n                                  };\n                                  window.addEventListener(\"mousemove\", onMouseMove);\n                                  window.addEventListener(\"mouseup\", onMouseUp);\n                                  e.preventDefault(); // Prevent text selection\n                                }}\n                                initial={{opacity: 0, y: 10}}\n                                animate={{opacity: 1, y: 0}}\n                                transition={{\n                                  duration: 0.3,\n                                  delay: evtIndex * 0.1,\n                                }}\n                                role=\"button\"\n                                tabIndex={0}\n                                aria-label={`Event: ${event.title}, ${\n                                  event.isChecked ? \"Completed\" : \"In Progress\"\n                                }`}\n                                onKeyDown={(e) => {\n                                  if (e.key === \"Enter\" || e.key === \" \") {\n                                    e.preventDefault();\n                                    setSelectedEvent({catIndex, evtIndex});\n                                  }\n                                }}\n                                onClick={() =>\n                                  setSelectedEvent({catIndex, evtIndex})\n                                }\n                              >\n                                {!event.isChecked && (\n                                  <Progress\n                                    value={50} // Mocked; replace with real data if available\n                                    className=\"absolute top-0 left-0 h-full w-full bg-transparent\"\n                                  />\n                                )}\n                                {showLabel && (\n                                  <span className=\"text-xs px-2 truncate z-10\">\n                                    {event.title}\n                                  </span>\n                                )}\n                              </motion.div>\n                            </TooltipTrigger>\n                            <TooltipContent>\n                              <p className=\"font-medium\">{event.title}</p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {event.isChecked ? \"Completed\" : \"In Progress\"}\n                              </p>\n                              {event.dependencies.length > 0 && (\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Depends on: {event.dependencies.join(\", \")}\n                                </p>\n                              )}\n                            </TooltipContent>\n                          </Tooltip>\n                        );\n                      })}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </ScrollArea>\n        </div>\n\n        {/* Analytics Sidebar */}\n        <aside className=\"w-full lg:w-80 bg-card border border-border rounded-[var(--radius-md)] p-4\">\n          <h2 className=\"text-xl font-semibold mb-4 text-card-foreground\">\n            Analytics\n          </h2>\n          <div className=\"mb-4 space-y-1\">\n            <div className=\"text-sm text-muted-foreground\">\n              Total Events: {totalEvents}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">\n              Completed: {completedEvents}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">\n              Completion Rate: {completionRate.toFixed(1)}%\n            </div>\n          </div>\n          <div className=\"mb-6\">\n            <h3 className=\"text-sm font-medium text-muted-foreground mb-2\">\n              Completion by Type\n            </h3>\n            <BarChart width={260} height={200} data={typeData}>\n              <XAxis\n                dataKey=\"name\"\n                tick={{fontSize: 12, fill: \"var(--muted-foreground)\"}}\n                stroke=\"var(--muted-foreground)\"\n              />\n              <YAxis stroke=\"var(--muted-foreground)\"/>\n              <RechartsTooltip\n                contentStyle={{\n                  backgroundColor: \"var(--popover)\",\n                  color: \"var(--popover-foreground)\",\n                  border: \"1px solid var(--border)\",\n                  borderRadius: \"var(--radius-sm)\",\n                }}\n              />\n              <Legend/>\n              <Bar\n                dataKey=\"completed\"\n                fill=\"var(--chart-1)\"\n                name=\"Completed\"\n              />\n              <Bar\n                dataKey=\"total\"\n                fill=\"var(--muted)\"\n                name=\"Total\"\n                opacity={0.4}\n              />\n            </BarChart>\n          </div>\n          <div className=\"mb-6\">\n            <h3 className=\"text-sm font-medium text-muted-foreground mb-2\">\n              Event Density\n            </h3>\n            <AreaChart width={260} height={200} data={densityData}>\n              <XAxis\n                dataKey=\"name\"\n                tick={{fontSize: 12, fill: \"var(--muted-foreground)\"}}\n                stroke=\"var(--muted-foreground)\"\n              />\n              <YAxis stroke=\"var(--muted-foreground)\"/>\n              <RechartsTooltip\n                contentStyle={{\n                  backgroundColor: \"var(--popover)\",\n                  color: \"var(--popover-foreground)\",\n                  border: \"1px solid var(--border)\",\n                  borderRadius: \"var(--radius-sm)\",\n                }}\n              />\n              <Area\n                type=\"monotone\"\n                dataKey=\"events\"\n                fill=\"var(--chart-1)\"\n                fillOpacity={0.3}\n                stroke=\"var(--chart-1)\"\n              />\n            </AreaChart>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={() => exportData(\"json\")}\n              aria-label=\"Export as JSON\"\n            >\n              <Download className=\"w-4 h-4 mr-2\"/> JSON\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={() => exportData(\"csv\")}\n              aria-label=\"Export as CSV\"\n            >\n              <Download className=\"w-4 h-4 mr-2\"/> CSV\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={shareView}\n              aria-label=\"Share View\"\n            >\n              <Share2 className=\"w-4 h-4 mr-2\"/> Share\n            </Button>\n          </div>\n        </aside>\n      </div>\n\n      {/* Event Details (Responsive) */}\n      {isMobile ? (\n        <Drawer\n          open={selectedEvent !== null}\n          onOpenChange={(open) => !open && setSelectedEvent(null)}\n        >\n          <DrawerContent className=\"rounded-t-[var(--radius-md)]\">\n            <DrawerHeader>\n              <DrawerTitle>\n                {selectedEventDetails?.title || \"Event Details\"}\n              </DrawerTitle>\n            </DrawerHeader>\n            {selectedEventDetails && (\n              <div className=\"space-y-4 p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-medium\">Status:</span>\n                  <Badge\n                    variant={\n                      selectedEventDetails.isChecked ? \"default\" : \"secondary\"\n                    }\n                  >\n                    {selectedEventDetails.isChecked ? \"Completed\" : \"In Progress\"}\n                  </Badge>\n                </div>\n                <Separator/>\n                <p>\n                  <strong>Description:</strong> {selectedEventDetails.description}\n                </p>\n                <p>\n                  <strong>Assignee:</strong> {selectedEventDetails.assignee}\n                </p>\n                <div>\n                  <strong>Dependencies:</strong>\n                  {selectedEventDetails.dependencies.length > 0 ? (\n                    <div className=\"flex flex-wrap gap-2 mt-1\">\n                      {selectedEventDetails.dependencies.map((dep) => (\n                        <Badge key={dep} variant=\"outline\">\n                          {dep}\n                        </Badge>\n                      ))}\n                    </div>\n                  ) : (\n                    \" None\"\n                  )}\n                </div>\n              </div>\n            )}\n          </DrawerContent>\n        </Drawer>\n      ) : (\n        <Dialog\n          open={selectedEvent !== null}\n          onOpenChange={(open) => !open && setSelectedEvent(null)}\n        >\n          <DialogContent className=\"rounded-[var(--radius-md)]\">\n            <DialogHeader>\n              <DialogTitle>\n                {selectedEventDetails?.title || \"Event Details\"}\n              </DialogTitle>\n            </DialogHeader>\n            {selectedEventDetails && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-medium\">Status:</span>\n                  <Badge\n                    variant={\n                      selectedEventDetails.isChecked ? \"default\" : \"secondary\"\n                    }\n                  >\n                    {selectedEventDetails.isChecked ? \"Completed\" : \"In Progress\"}\n                  </Badge>\n                </div>\n                <Separator/>\n                <p>\n                  <strong>Description:</strong> {selectedEventDetails.description}\n                </p>\n                <p>\n                  <strong>Assignee:</strong> {selectedEventDetails.assignee}\n                </p>\n                <div>\n                  <strong>Dependencies:</strong>\n                  {selectedEventDetails.dependencies.length > 0 ? (\n                    <div className=\"flex flex-wrap gap-2 mt-1\">\n                      {selectedEventDetails.dependencies.map((dep) => (\n                        <Badge key={dep} variant=\"outline\">\n                          {dep}\n                        </Badge>\n                      ))}\n                    </div>\n                  ) : (\n                    \" None\"\n                  )}\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      )}\n    </TooltipProvider>\n  );\n}",
      "type": "registry:component",
      "target": "components/gantt-chart-roadmap-timeline.tsx"
    }
  ]
}