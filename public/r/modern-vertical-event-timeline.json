{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modern-vertical-event-timeline",
  "type": "registry:block",
  "title": "Modern Vertical Event Timeline",
  "description": "shadcn/ui modern vertical event timeline and roadmap block",
  "registryDependencies": [
    "badge",
    "card"
  ],
  "files": [
    {
      "path": "src/app/modern/page.tsx",
      "content": "\"use client\";\n\nimport {useState, useMemo} from \"react\";\nimport {motion, AnimatePresence} from \"framer-motion\";\nimport {Plus, Minus, Target, Flag, Download} from \"lucide-react\";\nimport {Card} from \"@/components/ui/card\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  CartesianGrid,\n  Legend,\n  ScatterChart,\n  Scatter,\n  AreaChart,\n  Area,\n} from \"recharts\";\nimport {Events} from \"@/types/events\";\nimport {events} from \"@/data/events\";\n\nexport default function ModernVerticalEventTimeline() {\n  const [expandedIndex, setExpandedIndex] = useState<number | null>(0);\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [activeTab, setActiveTab] = useState<string>(\"overview\");\n\n  const toggleExpand = (index: number) => setExpandedIndex(expandedIndex === index ? null : index);\n  const formatPeriod = (item: Events[0]) => (item.periodType === \"Q\" ? `Q${item.periodNumber}` : item.periodType === \"H\" ? `H${item.periodNumber}` : `${item.year}`);\n  const getEventStatus = (item: Events[0]) => {\n    const currentYear = 2025, currentQuarter = 2;\n    const eventQuarter = item.periodType === \"Q\" ? item.periodNumber : item.periodNumber * 2;\n    if (item.year < currentYear || (item.year === currentYear && eventQuarter < currentQuarter)) return \"past\";\n    if (item.year === currentYear && eventQuarter === currentQuarter) return \"current\";\n    return \"future\";\n  };\n\n  // Type Colors mapped to your chart variables\n  const typeColors: { [key: string]: string } = {\n    Development: \"var(--chart-1)\",  // OKLCH colors from your theme\n    Marketing: \"var(--chart-2)\",\n    Partnerships: \"var(--chart-3)\",\n    Security: \"var(--chart-4)\",\n    Deployment: \"var(--chart-5)\",\n    Community: \"var(--chart-1)\",    // Reuse chart-1 for simplicity\n    \"E-commerce\": \"var(--chart-2)\", // Reuse chart-2\n  };\n\n  // Analytics Data Preparation\n  const filteredEvents = events.filter((item) => filterStatus === \"all\" || getEventStatus(item) === filterStatus);\n  const progressData = filteredEvents.map((item) => ({\n    name: `${item.year} ${formatPeriod(item)}`,\n    completed: item.events.filter((e) => e.isChecked).length,\n    total: item.events.length,\n  }));\n  const statusData = [\n    {name: \"Past\", value: events.filter((item) => getEventStatus(item) === \"past\").length},\n    {name: \"Current\", value: events.filter((item) => getEventStatus(item) === \"current\").length},\n    {name: \"Future\", value: events.filter((item) => getEventStatus(item) === \"future\").length},\n  ].filter((d) => d.value > 0);\n  const trendData = filteredEvents.map((item) => ({\n    name: `${item.year} ${formatPeriod(item)}`,\n    completion: ((item.events.filter((e) => e.isChecked).length / item.events.length) * 100) || 0,\n  }));\n  const typeData = filteredEvents.map((item) => {\n    const types = Object.keys(typeColors);\n    const result: any = {name: `${item.year} ${formatPeriod(item)}`, Total: item.events.length};\n    types.forEach((type) => {\n      result[type] = item.events.filter((e) => e.type === type && e.isChecked).length;\n    });\n    return result;\n  });\n  const completionEstimate = filteredEvents.map((item, idx) => {\n    const pastEvents = filteredEvents.slice(0, idx + 1).filter((e) => getEventStatus(e) === \"past\");\n    const completedEvents = pastEvents.reduce((sum, e) => sum + e.events.filter((ev) => ev.isChecked).length, 0);\n    const totalPastEvents = pastEvents.reduce((sum, e) => sum + e.events.length, 0);\n    const avgCompletionRate = totalPastEvents > 0 ? completedEvents / totalPastEvents : 0;\n    const remainingEvents = item.events.filter((e) => !e.isChecked).length;\n    const estimatedPeriods = avgCompletionRate > 0 ? remainingEvents / avgCompletionRate : 0;\n    return {\n      name: `${item.year} ${formatPeriod(item)}`,\n      estimated: estimatedPeriods > 0 ? Number(estimatedPeriods.toFixed(1)) : 0\n    };\n  });\n  const densityData = filteredEvents.map((item) => ({\n    name: `${item.year} ${formatPeriod(item)}`,\n    events: item.events.length,\n  }));\n\n  const STATUS_COLORS = [typeColors.Development, typeColors.Marketing, typeColors.Partnerships]; // For PieChart\n\n  const predictCompletion = () => {\n    const pastEvents = events.filter((item) => getEventStatus(item) === \"past\");\n    const totalEvents = events.reduce((sum, item) => sum + item.events.length, 0);\n    const completedEvents = pastEvents.reduce((sum, item) => sum + item.events.filter((e) => e.isChecked).length, 0);\n    const avgCompletionRate = pastEvents.length ? completedEvents / pastEvents.length : 0;\n    const remainingEvents = totalEvents - completedEvents;\n    return remainingEvents / avgCompletionRate || \"N/A\";\n  };\n\n  const exportData = () => {\n    const data = {progressData, statusData, trendData, typeData, completionEstimate, densityData};\n    const blob = new Blob([JSON.stringify(data, null, 2)], {type: \"application/json\"});\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"roadmap-analytics.json\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  // Memoized event items with type integration\n  const eventItems = useMemo(\n    () =>\n      filteredEvents.map((item, index) => {\n        const completedEvents = item.events.filter((e) => e.isChecked).length;\n        const totalEvents = item.events.length;\n        const progress = totalEvents > 0 ? (completedEvents / totalEvents) * 100 : 0;\n        const status = getEventStatus(item);\n\n        const typeCounts = item.events.reduce((acc: { [key: string]: number }, event) => {\n          acc[event.type || \"Unknown\"] = (acc[event.type || \"Unknown\"] || 0) + 1;\n          return acc;\n        }, {});\n        const typeSummary = Object.entries(typeCounts)\n          .map(([type, count]) => `${count} ${type}`)\n          .join(\", \");\n\n        return (\n          <motion.div key={index} className=\"relative flex items-start gap-6 mb-12\" initial={{opacity: 0, x: -20}}\n                      animate={{opacity: 1, x: 0}} transition={{duration: 0.5, delay: index * 0.1}}>\n            <div className=\"flex flex-col items-center relative\">\n              <div\n                className={`absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-medium px-2 py-1 rounded-full ${\n                  status === \"past\" ? \"bg-[color:var(--accent)] text-[color:var(--accent-foreground)]\" : status === \"current\" ? \"bg-[color:var(--secondary)] text-[color:var(--secondary-foreground)]\" : \"bg-[color:var(--muted)] text-[color:var(--muted-foreground)]\"\n                }`}\n              >\n                {item.year}\n              </div>\n              <div\n                className={`absolute top-7 left-1/2 transform -translate-x-1/2 text-xs font-medium px-2 py-1 rounded-full ${\n                  status === \"past\" ? \"bg-[color:var(--accent)] text-[color:var(--accent-foreground)]\" : status === \"current\" ? \"bg-[color:var(--secondary)] text-[color:var(--secondary-foreground)]\" : \"bg-[color:var(--muted)] text-[color:var(--muted-foreground)]\"\n                }`}\n              >\n                {formatPeriod(item)}\n              </div>\n              <div\n                className={`w-5 h-5 rounded-full border-2 border-[color:var(--border)] shadow-md ${\n                  status === \"past\" ? \"bg-[color:var(--chart-1)]\" : status === \"current\" ? \"bg-[color:var(--chart-2)]\" : \"bg-[color:var(--muted)]\"\n                }`}\n              >\n                {status === \"current\" && <Flag\n                  className=\"w-3 h-3 text-[color:var(--primary-foreground)] absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\"/>}\n              </div>\n              <div\n                className={`w-0.5 ${index === filteredEvents.length - 1 ? \"h-0\" : status === \"future\" ? \"h-20 border-l-2 border-dashed border-[color:var(--border)]\" : \"h-20 bg-[color:var(--chart-1)]/30\"}`}\n              />\n            </div>\n            <Card\n              className={`flex-1 bg-[color:var(--card)] text-[color:var(--card-foreground)] border-none shadow-md rounded-[var(--radius-md)] overflow-hidden ${status === \"current\" ? \"ring-2 ring-[color:var(--ring)]\" : \"\"}`}>\n              <button\n                className={`w-full p-4 flex items-center justify-between text-left transition-all duration-200 ${\n                  status === \"past\" ? \"bg-[color:var(--accent)] hover:bg-[color:var(--accent-foreground)]/10\" : status === \"current\" ? \"bg-[color:var(--secondary)] hover:bg-[color:var(--secondary-foreground)]/10\" : \"bg-[color:var(--muted)] hover:bg-[color:var(--muted-foreground)]/10\"\n                }`}\n                onClick={() => toggleExpand(index)}\n                aria-expanded={expandedIndex === index}\n                aria-controls={`event-details-${index}`}\n              >\n                <div className=\"flex flex-col gap-1\">\n                  <h3 className=\"text-lg font-semibold\">{item.year} Roadmap</h3>\n                  <p className=\"text-xs text-[color:var(--muted-foreground)]\">{typeSummary}</p>\n                </div>\n                <motion.div animate={{rotate: expandedIndex === index ? 0 : 45}} transition={{duration: 0.3}}>\n                  {expandedIndex === index ? (\n                    <Minus\n                      className={`w-5 h-5 ${status === \"past\" ? \"text-[color:var(--chart-1)]\" : status === \"current\" ? \"text-[color:var(--chart-2)]\" : \"text-[color:var(--muted-foreground)]\"}`}\n                      aria-label=\"Collapse\"\n                    />\n                  ) : (\n                    <Plus\n                      className={`w-5 h-5 ${status === \"past\" ? \"text-[color:var(--chart-1)]\" : status === \"current\" ? \"text-[color:var(--chart-2)]\" : \"text-[color:var(--muted-foreground)]\"}`}\n                      aria-label=\"Expand\"\n                    />\n                  )}\n                </motion.div>\n              </button>\n              <AnimatePresence>\n                {expandedIndex === index && (\n                  <motion.div id={`event-details-${index}`} initial={{height: 0, opacity: 0}}\n                              animate={{height: \"auto\", opacity: 1}} exit={{height: 0, opacity: 0}}\n                              transition={{duration: 0.3}} className=\"overflow-hidden\">\n                    <div className=\"p-4 space-y-4\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm text-[color:var(--muted-foreground)]\">\n                          <span className=\"flex items-center gap-1\">\n                            <Target className=\"w-4 h-4 text-[color:var(--primary)]\"/>\n                            Progress\n                          </span>\n                          <span>{progress.toFixed(0)}% Complete</span>\n                        </div>\n                        <div className=\"w-full h-2 bg-[color:var(--muted)] rounded-full overflow-hidden\">\n                          <motion.div\n                            className={`h-full ${status === \"past\" ? \"bg-[color:var(--chart-1)]\" : status === \"current\" ? \"bg-[color:var(--chart-2)]\" : \"bg-[color:var(--muted-foreground)]\"}`}\n                            initial={{width: 0}}\n                            animate={{width: `${progress}%`}}\n                            transition={{duration: 0.5}}\n                          />\n                        </div>\n                      </div>\n                      <ul className=\"space-y-3\">\n                        {item.events.map((event, i) => (\n                          <motion.li key={i} className=\"flex items-start gap-2 text-sm\" initial={{opacity: 0, y: 10}}\n                                     animate={{opacity: 1, y: 0}} transition={{duration: 0.3, delay: i * 0.05}}>\n                            <span\n                              className={`w-2 h-2 mt-1.5 rounded-full ${event.isChecked ? \"bg-[color:var(--chart-1)]\" : \"bg-[color:var(--muted)]\"}`}/>\n                            <div className=\"flex items-center gap-2\">\n                              <span>{event.title}</span>\n                              {event.type && (\n                                <span\n                                  className=\"text-xs font-medium px-2 py-0.5 rounded-full\"\n                                  style={{\n                                    backgroundColor: `${typeColors[event.type]}20`,\n                                    color: typeColors[event.type]\n                                  }}\n                                >\n                                  {event.type}\n                                </span>\n                              )}\n                            </div>\n                          </motion.li>\n                        ))}\n                      </ul>\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </Card>\n          </motion.div>\n        );\n      }),\n    [filteredEvents, expandedIndex]\n  );\n\n  return (\n    <div className=\"max-w-6xl mx-auto px-4 py-12\">\n      <motion.h1 className=\"text-3xl font-bold text-center mb-2\" initial={{opacity: 0, y: -20}}\n                 animate={{opacity: 1, y: 0}} transition={{duration: 0.5}}>\n        Project Roadmap\n      </motion.h1>\n      <motion.p className=\"text-center text-[color:var(--muted-foreground)] mb-12\" initial={{opacity: 0}}\n                animate={{opacity: 1}} transition={{duration: 0.5, delay: 0.2}}>\n        Mapping our past achievements and future goals\n      </motion.p>\n\n      {/* Analytics Dashboard */}\n      <div\n        className=\"mb-16 bg-[color:var(--card)] text-[color:var(--card-foreground)] p-6 rounded-[var(--radius-md)] shadow-md border border-[color:var(--border)]\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-xl font-semibold\">Roadmap Analytics</h2>\n          <div className=\"flex gap-4\">\n            <select\n              className=\"border border-[color:var(--border)] rounded-[var(--radius-sm)] p-2 text-sm bg-[color:var(--card)] text-[color:var(--card-foreground)]\"\n              value={filterStatus}\n              onChange={(e) => setFilterStatus(e.target.value)}\n            >\n              <option value=\"all\">All Events</option>\n              <option value=\"past\">Past</option>\n              <option value=\"current\">Current</option>\n              <option value=\"future\">Future</option>\n            </select>\n            <button onClick={exportData}\n                    className=\"flex items-center gap-2 bg-[color:var(--primary)] text-[color:var(--primary-foreground)] px-4 py-2 rounded-[var(--radius-sm)]\">\n              <Download className=\"w-4 h-4\"/> Export\n            </button>\n          </div>\n        </div>\n        <div className=\"flex border-b mb-4 border-[color:var(--border)]\">\n          {[\"overview\", \"types\", \"estimates\", \"density\"].map((tab) => (\n            <button\n              key={tab}\n              className={`px-4 py-2 ${activeTab === tab ? \"border-b-2 border-[color:var(--primary)] text-[color:var(--primary)]\" : \"text-[color:var(--muted-foreground)]\"}`}\n              onClick={() => setActiveTab(tab)}\n            >\n              {tab.charAt(0).toUpperCase() + tab.slice(1)}\n            </button>\n          ))}\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {activeTab === \"overview\" && (\n            <>\n              <div>\n                <h3 className=\"text-sm font-medium text-[color:var(--muted-foreground)] mb-2\">Progress by Period</h3>\n                <BarChart width={300} height={200} data={progressData}>\n                  <XAxis dataKey=\"name\" tick={{fontSize: 12, fill: \"var(--muted-foreground)\"}}\n                         stroke=\"var(--muted-foreground)\"/>\n                  <YAxis id=\"x-axis\" stroke=\"var(--muted-foreground)\"/>\n                  <Tooltip contentStyle={{\n                    backgroundColor: \"var(--popover)\",\n                    color: \"var(--popover-foreground)\",\n                    border: \"1px solid var(--border)\"\n                  }}/>\n                  <Legend/>\n                  <Bar dataKey=\"completed\" fill=\"var(--chart-1)\" name=\"Completed\"/>\n                  <Bar dataKey=\"total\" fill=\"var(--muted)\" name=\"Total\" opacity={0.4}/>\n                </BarChart>\n              </div>\n              <div>\n                <h3 className=\"text-sm font-medium text-[color:var(--muted-foreground)] mb-2\">Status Distribution</h3>\n                <PieChart width={300} height={200}>\n                  <Pie\n                    data={statusData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={80}\n                    dataKey=\"value\"\n                    label={({name, percent}) => `${name} (${(percent * 100).toFixed(0)}%)`}\n                    labelLine={{stroke: \"var(--muted-foreground)\"}}\n                  >\n                    {statusData.map((entry, index) => <Cell key={`cell-${index}`}\n                                                            fill={STATUS_COLORS[index % STATUS_COLORS.length]}/>)}\n                  </Pie>\n                  <Tooltip contentStyle={{\n                    backgroundColor: \"var(--popover)\",\n                    color: \"var(--popover-foreground)\",\n                    border: \"1px solid var(--border)\"\n                  }}/>\n                </PieChart>\n              </div>\n              <div>\n                <h3 className=\"text-sm font-medium text-[color:var(--muted-foreground)] mb-2\">Completion Trend</h3>\n                <LineChart width={300} height={200} data={trendData}>\n                  <XAxis dataKey=\"name\" tick={{fontSize: 12, fill: \"var(--muted-foreground)\"}}\n                         stroke=\"var(--muted-foreground)\"/>\n                  <YAxis stroke=\"var(--muted-foreground)\"/>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--border)\"/>\n                  <Tooltip contentStyle={{\n                    backgroundColor: \"var(--popover)\",\n                    color: \"var(--popover-foreground)\",\n                    border: \"1px solid var(--border)\"\n                  }}/>\n                  <Legend/>\n                  <Line type=\"monotone\" dataKey=\"completion\" stroke=\"var(--chart-5)\" name=\"Completion (%)\"/>\n                </LineChart>\n              </div>\n            </>\n          )}\n          {activeTab === \"types\" && (\n            <div>\n              <h3 className=\"text-sm font-medium text-[color:var(--muted-foreground)] mb-2\">Completion by Event\n                Type</h3>\n              <BarChart width={300} height={200} data={typeData}>\n                <XAxis dataKey=\"name\" tick={{fontSize: 12, fill: \"var(--muted-foreground)\"}}\n                       stroke=\"var(--muted-foreground)\"/>\n                <YAxis stroke=\"var(--muted-foreground)\"/>\n                <Tooltip contentStyle={{\n                  backgroundColor: \"var(--popover)\",\n                  color: \"var(--popover-foreground)\",\n                  border: \"1px solid var(--border)\"\n                }}/>\n                <Legend/>\n                <Bar dataKey=\"Development\" stackId=\"a\" fill=\"var(--chart-1)\" name=\"Development\"/>\n                <Bar dataKey=\"Marketing\" stackId=\"a\" fill=\"var(--chart-2)\" name=\"Marketing\"/>\n                <Bar dataKey=\"Partnerships\" stackId=\"a\" fill=\"var(--chart-3)\" name=\"Partnerships\"/>\n                <Bar dataKey=\"Security\" stackId=\"a\" fill=\"var(--chart-4)\" name=\"Security\"/>\n                <Bar dataKey=\"Deployment\" stackId=\"a\" fill=\"var(--chart-5)\" name=\"Deployment\"/>\n                <Bar dataKey=\"Community\" stackId=\"a\" fill=\"var(--chart-1)\" name=\"Community\"/>\n                <Bar dataKey=\"E-commerce\" stackId=\"a\" fill=\"var(--chart-2)\" name=\"E-commerce\"/>\n                <Bar dataKey=\"Total\" fill=\"var(--muted)\" name=\"Total\" opacity={0.4}/>\n              </BarChart>\n            </div>\n          )}\n          {activeTab === \"estimates\" && (\n            <div>\n              <h3 className=\"text-sm font-medium text-[color:var(--muted-foreground)] mb-2\">Time to Completion\n                Estimate</h3>\n              <ScatterChart width={300} height={200} data={completionEstimate}>\n                <XAxis dataKey=\"name\" tick={{fontSize: 12, fill: \"var(--muted-foreground)\"}}\n                       stroke=\"var(--muted-foreground)\" name=\"Period\"/>\n                <YAxis dataKey=\"estimated\" name=\"Periods\" stroke=\"var(--muted-foreground)\"/>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--border)\"/>\n                <Tooltip cursor={{strokeDasharray: \"3 3\"}} contentStyle={{\n                  backgroundColor: \"var(--popover)\",\n                  color: \"var(--popover-foreground)\",\n                  border: \"1px solid var(--border)\"\n                }}/>\n                <Legend/>\n                <Scatter name=\"Estimated Periods\" data={completionEstimate} fill=\"var(--chart-5)\"/>\n              </ScatterChart>\n              <p className=\"text-xs text-[color:var(--muted-foreground)] mt-2\">Predicted remaining\n                periods: {Number(predictCompletion()).toFixed(1) || \"N/A\"}</p>\n            </div>\n          )}\n          {activeTab === \"density\" && (\n            <div>\n              <h3 className=\"text-sm font-medium text-[color:var(--muted-foreground)] mb-2\">Event Density Heatmap</h3>\n              <AreaChart width={300} height={200} data={densityData}>\n                <XAxis dataKey=\"name\" tick={{fontSize: 12, fill: \"var(--muted-foreground)\"}}\n                       stroke=\"var(--muted-foreground)\"/>\n                <YAxis stroke=\"var(--muted-foreground)\"/>\n                <Tooltip contentStyle={{\n                  backgroundColor: \"var(--popover)\",\n                  color: \"var(--popover-foreground)\",\n                  border: \"1px solid var(--border)\"\n                }}/>\n                <Area type=\"monotone\" dataKey=\"events\" fill=\"var(--chart-1)\" fillOpacity={0.3} stroke=\"var(--chart-1)\"/>\n              </AreaChart>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Timeline */}\n      <div className=\"relative\">\n        {eventItems.length > 0 ? eventItems :\n          <p className=\"text-center text-[color:var(--muted-foreground)]\">No roadmap data available.</p>}\n      </div>\n    </div>\n  );\n}",
      "type": "registry:component",
      "target": "components/modern-vertical-event-timeline.tsx"
    }
  ]
}