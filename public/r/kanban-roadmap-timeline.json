{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "kanban-roadmap-timeline",
  "type": "registry:block",
  "title": "Kanban Roadmap Timeline",
  "description": "shadcn/ui kanban roadmap and timeline block",
  "registryDependencies": [
    "badge",
    "tooltip",
    "dialog",
    "select",
    "progress",
    "separator",
    "scroll-area",
    "card"
  ],
  "files": [
    {
      "path": "src/app/kanban/page.tsx",
      "content": "\"use client\";\n\nimport {useState, useMemo, useCallback} from \"react\";\nimport {motion} from \"framer-motion\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {Badge} from \"@/components/ui/badge\";\nimport {Progress} from \"@/components/ui/progress\";\nimport {ScrollArea} from \"@/components/ui/scroll-area\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n} from \"@/components/ui/drawer\";\nimport {Separator} from \"@/components/ui/separator\";\nimport {Avatar, AvatarFallback} from \"@/components/ui/avatar\";\nimport {Button} from \"@/components/ui/button\";\nimport {Checkbox} from \"@/components/ui/checkbox\";\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from \"@/components/ui/hover-card\";\nimport {Input} from \"@/components/ui/input\";\nimport {Label} from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {Switch} from \"@/components/ui/switch\";\nimport {Textarea} from \"@/components/ui/textarea\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {cn} from \"@/lib/utils\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip as RechartsTooltip,\n  Legend,\n  AreaChart,\n  Area,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  CartesianGrid,\n} from \"recharts\";\nimport {Download, Search, Save} from \"lucide-react\";\nimport {events} from \"@/data/events\";\nimport {useMediaQuery} from \"@/hooks/use-media-query\";\n\n// Define enhanced event types\ntype EnhancedEvent = {\n  id: string;\n  title: string;\n  isChecked: boolean;\n  type?: string;\n  description: string;\n  assignee: string;\n  dependencies: string[];\n  period: string;\n};\n\ntype EnhancedEvents = {\n  year: number;\n  periodType: \"Q\" | \"H\";\n  periodNumber: number;\n  isChecked: boolean;\n  events: EnhancedEvent[];\n};\n\nexport default function KanbanRoadmap() {\n  // State\n  const [selectedEvent, setSelectedEvent] = useState<EnhancedEvent | null>(null);\n  const [editedEvent, setEditedEvent] = useState<EnhancedEvent | null>(null);\n  const [columns, setColumns] = useState<{\n    \"To Do\": EnhancedEvent[];\n    \"In Progress\": EnhancedEvent[];\n    Completed: EnhancedEvent[];\n  }>({\n    \"To Do\": [],\n    \"In Progress\": [],\n    Completed: [],\n  });\n  const [filterType, setFilterType] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState<string>(\"\");\n  const [sortBy, setSortBy] = useState<\"title\" | \"period\">(\"title\");\n  const [showCompleted, setShowCompleted] = useState(true);\n  const isMobile = useMediaQuery(\"(max-width: 768px)\");\n\n  // Color mappings\n  const typeColors: { [key: string]: string } = {\n    Development: \"var(--chart-1)\",\n    Marketing: \"var(--chart-2)\",\n    Partnerships: \"var(--chart-3)\",\n    Security: \"var(--chart-4)\",\n    Deployment: \"var(--chart-5)\",\n    Community: \"var(--chart-1)\",\n    \"E-commerce\": \"var(--chart-2)\",\n  };\n\n  const statusColors = {\n    \"To Do\": \"var(--chart-2)\",\n    \"In Progress\": \"var(--chart-3)\",\n    Completed: \"var(--chart-1)\",\n  };\n\n  // Memoized enhanced events with editable state\n  const [eventData, setEventData] = useState<EnhancedEvents[]>(() =>\n    events.map((period) => ({\n      ...period,\n      events: period.events.map((event, idx) => ({\n        ...event,\n        id: `${period.year}-${period.periodType}${period.periodNumber}-${event.title}-${idx}`,\n        description: `Details for ${event.title}`,\n        assignee: \"Team A\",\n        dependencies: event.title.includes(\"Phase 2\") ? [\"Phase 1\"] : [],\n        period: `${period.year} ${period.periodType}${period.periodNumber}`,\n      })),\n    }))\n  );\n\n  // Filtered and sorted events\n  const filteredEvents = useMemo(() => {\n    const allEvents = eventData.flatMap((p) => p.events);\n    return allEvents\n      .filter((e) => (filterType === \"all\" ? true : e.type === filterType))\n      .filter((e) =>\n        searchQuery ? e.title.toLowerCase().includes(searchQuery.toLowerCase()) : true\n      )\n      .filter((e) => (showCompleted ? true : !e.isChecked))\n      .sort((a, b) =>\n        sortBy === \"title\" ? a.title.localeCompare(b.title) : a.period.localeCompare(b.period)\n      );\n  }, [eventData, filterType, searchQuery, sortBy, showCompleted]);\n\n  // Initialize columns\n  useMemo(() => {\n    setColumns({\n      \"To Do\": filteredEvents.filter((e) => !e.isChecked),\n      \"In Progress\": filteredEvents.filter((e) => !e.isChecked).slice(0, 3), // Mocked subset\n      Completed: filteredEvents.filter((e) => e.isChecked),\n    });\n  }, [filteredEvents]);\n\n  // Analytics data\n  const typeData = useMemo(() => {\n    const types = Object.keys(typeColors);\n    return types.map((type, idx) => ({\n      name: type,\n      completed: filteredEvents.filter((e) => e.type === type && e.isChecked).length,\n      total: filteredEvents.filter((e) => e.type === type).length,\n      fill: typeColors[type] || `var(--chart-${(idx % 5) + 1})`,\n    }));\n  }, [filteredEvents]);\n\n  const densityData = useMemo(() => {\n    const periods: { [key: string]: number } = {};\n    eventData.forEach((period) => {\n      const key = `${period.year} ${period.periodType}${period.periodNumber}`;\n      periods[key] = (periods[key] || 0) + period.events.length;\n    });\n    return Object.entries(periods).map(([name, count]) => ({name, count}));\n  }, [eventData]);\n\n  const statusData = useMemo(() => [\n    {name: \"To Do\", value: columns[\"To Do\"].length, fill: statusColors[\"To Do\"]},\n    {name: \"In Progress\", value: columns[\"In Progress\"].length, fill: statusColors[\"In Progress\"]},\n    {name: \"Completed\", value: columns.Completed.length, fill: statusColors.Completed},\n  ], [columns]);\n\n  const trendData = useMemo(() => {\n    const periods: { [key: string]: { completed: number; total: number } } = {};\n    eventData.forEach((period) => {\n      const key = `${period.year} ${period.periodType}${period.periodNumber}`;\n      periods[key] = {\n        completed: (periods[key]?.completed || 0) + period.events.filter((e) => e.isChecked).length,\n        total: (periods[key]?.total || 0) + period.events.length,\n      };\n    });\n    return Object.entries(periods).map(([name, {completed, total}]) => ({\n      name,\n      completed,\n      total,\n    }));\n  }, [eventData]);\n\n  // Export function\n  const exportData = useCallback(\n    (format: \"json\" | \"csv\") => {\n      const data = {columns, typeData, densityData, statusData, trendData};\n      if (format === \"json\") {\n        const blob = new Blob([JSON.stringify(data, null, 2)], {type: \"application/json\"});\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"kanban-roadmap.json\";\n        a.click();\n        URL.revokeObjectURL(url);\n      } else {\n        const csv = [\n          \"Status,Title,Type,Period,Assignee,Dependencies\",\n          ...Object.entries(columns).flatMap(([status, events]) =>\n            events.map((e) =>\n              `${status},${e.title},${e.type || \"N/A\"},${e.period},${e.assignee},${e.dependencies.join(\"|\")}`\n            )\n          ),\n        ].join(\"\\n\");\n        const blob = new Blob([csv], {type: \"text/csv\"});\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"kanban-roadmap.csv\";\n        a.click();\n        URL.revokeObjectURL(url);\n      }\n    },\n    [columns, typeData, densityData, statusData, trendData]\n  );\n\n  // Save edited event\n  const saveEditedEvent = useCallback(() => {\n    if (!editedEvent) return;\n    setEventData((prev) =>\n      prev.map((period) => ({\n        ...period,\n        events: period.events.map((e) => (e.id === editedEvent.id ? {...editedEvent} : e)),\n      }))\n    );\n    setSelectedEvent(editedEvent);\n    setEditedEvent(null);\n  }, [editedEvent]);\n\n  // Responsive chart width\n  const chartWidth = isMobile ? 300 : Math.min(500, window.innerWidth / 2 - 60);\n\n  return (\n    <TooltipProvider>\n      <div className=\"max-w-7xl mx-auto px-6 py-12 space-y-10\">\n        {/* Header */}\n        <motion.header\n          className=\"space-y-3\"\n          initial={{opacity: 0, y: -20}}\n          animate={{opacity: 1, y: 0}}\n          transition={{duration: 0.5}}\n        >\n          <h1 className=\"text-4xl font-bold text-foreground tracking-tight\">Kanban Roadmap</h1>\n          <p className=\"text-base text-muted-foreground/80\">Plan, track, and analyze with precision</p>\n        </motion.header>\n\n        {/* Analytics Dashboard */}\n        <motion.section\n          className=\"bg-gradient-to-br from-card to-muted/10 border border-border rounded-xl shadow-md p-6\"\n          initial={{opacity: 0, y: 20}}\n          animate={{opacity: 1, y: 0}}\n          transition={{duration: 0.5, delay: 0.2}}\n        >\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-semibold text-foreground\">Analytics Dashboard</h2>\n            <div className=\"flex gap-3\">\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"bg-background hover:bg-muted/50 border-border/50 text-foreground font-medium\"\n                    onClick={() => exportData(\"json\")}\n                  >\n                    <Download className=\"h-4 w-4 mr-2\"/> JSON\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>Export as JSON</TooltipContent>\n              </Tooltip>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"bg-background hover:bg-muted/50 border-border/50 text-foreground font-medium\"\n                    onClick={() => exportData(\"csv\")}\n                  >\n                    <Download className=\"h-4 w-4 mr-2\"/> CSV\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>Export as CSV</TooltipContent>\n              </Tooltip>\n            </div>\n          </div>\n          <div className={cn(\"space-y-8\", !isMobile && \"grid grid-cols-2 gap-8\")}>\n            {/* Completion by Type */}\n            <motion.div\n              className=\"bg-card border border-border/50 rounded-lg shadow-sm p-4 transition-all hover:shadow-md hover:scale-[1.02]\"\n              whileHover={{scale: 1.02}}\n            >\n              <div className=\"flex justify-between items-center mb-3\">\n                <div>\n                  <h3 className=\"text-xl font-semibold text-foreground\">Completion by Type</h3>\n                  <p className=\"text-sm text-muted-foreground/70 mt-1\">\n                    Completed vs. total events per type\n                  </p>\n                </div>\n              </div>\n              <BarChart width={chartWidth} height={250} data={typeData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--muted)\"/>\n                <XAxis dataKey=\"name\" stroke=\"var(--muted-foreground)\" tick={{fontSize: 12}}/>\n                <YAxis stroke=\"var(--muted-foreground)\" tick={{fontSize: 12}}/>\n                <RechartsTooltip\n                  contentStyle={{\n                    backgroundColor: \"var(--popover)\",\n                    color: \"var(--popover-foreground)\",\n                    border: \"1px solid var(--border)\",\n                    borderRadius: \"var(--radius)\",\n                  }}\n                />\n                <Legend wrapperStyle={{fontSize: 12}}/>\n                <Bar dataKey=\"completed\" name=\"Completed\" fillOpacity={0.8}/>\n                <Bar dataKey=\"total\" name=\"Total\" fillOpacity={0.3}/>\n              </BarChart>\n            </motion.div>\n\n            {/* Event Density */}\n            <motion.div\n              className=\"bg-card border border-border/50 rounded-lg shadow-sm p-4 transition-all hover:shadow-md hover:scale-[1.02]\"\n              whileHover={{scale: 1.02}}\n            >\n              <div className=\"flex justify-between items-center mb-3\">\n                <div>\n                  <h3 className=\"text-xl font-semibold text-foreground\">Event Density</h3>\n                  <p className=\"text-sm text-muted-foreground/70 mt-1\">\n                    Number of events per period\n                  </p>\n                </div>\n              </div>\n              <AreaChart width={chartWidth} height={250} data={densityData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--muted)\"/>\n                <XAxis dataKey=\"name\" stroke=\"var(--muted-foreground)\" tick={{fontSize: 12}}/>\n                <YAxis stroke=\"var(--muted-foreground)\" tick={{fontSize: 12}}/>\n                <RechartsTooltip\n                  contentStyle={{\n                    backgroundColor: \"var(--popover)\",\n                    color: \"var(--popover-foreground)\",\n                    border: \"1px solid var(--border)\",\n                    borderRadius: \"var(--radius)\",\n                  }}\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"count\"\n                  fill=\"var(--chart-1)\"\n                  fillOpacity={0.3}\n                  stroke=\"var(--chart-1)\"\n                  strokeWidth={2}\n                />\n              </AreaChart>\n            </motion.div>\n\n            {/* Status Distribution */}\n            <motion.div\n              className=\"bg-card border border-border/50 rounded-lg shadow-sm p-4 transition-all hover:shadow-md hover:scale-[1.02]\"\n              whileHover={{scale: 1.02}}\n            >\n              <div className=\"flex justify-between items-center mb-3\">\n                <div>\n                  <h3 className=\"text-xl font-semibold text-foreground\">Status Distribution</h3>\n                  <p className=\"text-sm text-muted-foreground/70 mt-1\">\n                    Breakdown of events by status\n                  </p>\n                </div>\n              </div>\n              <PieChart width={chartWidth} height={250}>\n                <Pie\n                  data={statusData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  label={({name, value}) => `${name}: ${value}`}\n                  labelLine={false}\n                  dataKey=\"value\"\n                >\n                  {statusData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill}/>\n                  ))}\n                </Pie>\n                <RechartsTooltip\n                  contentStyle={{\n                    backgroundColor: \"var(--popover)\",\n                    color: \"var(--popover-foreground)\",\n                    border: \"1px solid var(--border)\",\n                    borderRadius: \"var(--radius)\",\n                  }}\n                />\n                <Legend wrapperStyle={{fontSize: 12}}/>\n              </PieChart>\n            </motion.div>\n\n            {/* Completion Trend */}\n            <motion.div\n              className=\"bg-card border border-border/50 rounded-lg shadow-sm p-4 transition-all hover:shadow-md hover:scale-[1.02]\"\n              whileHover={{scale: 1.02}}\n            >\n              <div className=\"flex justify-between items-center mb-3\">\n                <div>\n                  <h3 className=\"text-xl font-semibold text-foreground\">Completion Trend</h3>\n                  <p className=\"text-sm text-muted-foreground/70 mt-1\">\n                    Completed vs. total events over time\n                  </p>\n                </div>\n              </div>\n              <LineChart width={chartWidth} height={250} data={trendData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--muted)\"/>\n                <XAxis dataKey=\"name\" stroke=\"var(--muted-foreground)\" tick={{fontSize: 12}}/>\n                <YAxis stroke=\"var(--muted-foreground)\" tick={{fontSize: 12}}/>\n                <RechartsTooltip\n                  contentStyle={{\n                    backgroundColor: \"var(--popover)\",\n                    color: \"var(--popover-foreground)\",\n                    border: \"1px solid var(--border)\",\n                    borderRadius: \"var(--radius)\",\n                  }}\n                />\n                <Legend wrapperStyle={{fontSize: 12}}/>\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"completed\"\n                  stroke=\"var(--chart-1)\"\n                  strokeWidth={2}\n                  name=\"Completed\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"total\"\n                  stroke=\"var(--chart-3)\"\n                  strokeWidth={2}\n                  name=\"Total\"\n                />\n              </LineChart>\n            </motion.div>\n          </div>\n        </motion.section>\n\n        {/* Filters and Controls */}\n        <motion.section\n          className=\"flex flex-col md:flex-row gap-4 items-center bg-gradient-to-br from-card to-muted/10 border border-border rounded-xl p-5 shadow-md\"\n          initial={{opacity: 0, y: 20}}\n          animate={{opacity: 1, y: 0}}\n          transition={{duration: 0.5, delay: 0.4}}\n        >\n          <div className=\"flex-1 flex items-center gap-3 w-full md:w-auto\">\n            <Search className=\"h-5 w-5 text-muted-foreground/70\"/>\n            <Input\n              placeholder=\"Search events...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full bg-background border-border/50 focus:ring-2 focus:ring-ring focus:border-transparent rounded-lg\"\n            />\n          </div>\n          <div className=\"flex gap-4 w-full md:w-auto items-center\">\n            <Select value={filterType} onValueChange={setFilterType}>\n              <SelectTrigger className=\"w-[160px] bg-background border-border/50\">\n                <SelectValue placeholder=\"Filter by Type\"/>\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                {Object.keys(typeColors).map((type) => (\n                  <SelectItem key={type} value={type}>\n                    {type}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Select value={sortBy} onValueChange={(v) => setSortBy(v as \"title\" | \"period\")}>\n              <SelectTrigger className=\"w-[160px] bg-background border-border/50\">\n                <SelectValue placeholder=\"Sort by\"/>\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"title\">Title</SelectItem>\n                <SelectItem value=\"period\">Period</SelectItem>\n              </SelectContent>\n            </Select>\n            <div className=\"flex items-center gap-2\">\n              <Switch\n                checked={showCompleted}\n                onCheckedChange={setShowCompleted}\n                id=\"show-completed\"\n                className=\"data-[state=checked]:bg-[var(--chart-1)]\"\n              />\n              <Label htmlFor=\"show-completed\" className=\"text-sm text-muted-foreground/80 font-medium\">\n                Show Completed\n              </Label>\n            </div>\n          </div>\n        </motion.section>\n\n        {/* Kanban Board */}\n        <motion.section\n          className=\"flex gap-6 flex-col md:flex-row\"\n          initial={{opacity: 0, y: 20}}\n          animate={{opacity: 1, y: 0}}\n          transition={{duration: 0.5, delay: 0.6}}\n        >\n          {Object.entries(columns).map(([status, events]) => (\n            <Card\n              key={status}\n              className={cn(\n                \"flex-1 bg-card border border-border rounded-xl shadow-md overflow-hidden\",\n                \"transition-all hover:shadow-lg\",\n                status === \"To Do\" && \"border-t-4 border-t-[var(--chart-2)]\",\n                status === \"In Progress\" && \"border-t-4 border-t-[var(--chart-3)]\",\n                status === \"Completed\" && \"border-t-4 border-t-[var(--chart-1)]\"\n              )}\n            >\n              <CardHeader className=\"bg-gradient-to-r from-muted/20 to-muted/10 p-4\">\n                <CardTitle className=\"text-xl font-semibold flex items-center justify-between\">\n                  <span>{status}</span>\n                  <Badge\n                    variant=\"outline\"\n                    className=\"text-sm font-medium bg-background border-border/50\"\n                  >\n                    {events.length}\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <ScrollArea className=\"h-[600px] p-5\">\n                  {events.length === 0 ? (\n                    <p className=\"text-muted-foreground text-center text-sm font-medium\">\n                      No events in this status\n                    </p>\n                  ) : (\n                    events.map((event) => (\n                      <motion.div\n                        key={event.id}\n                        className=\"mb-4\"\n                        initial={{opacity: 0, scale: 0.95}}\n                        animate={{opacity: 1, scale: 1}}\n                        transition={{duration: 0.3}}\n                      >\n                        <HoverCard>\n                          <HoverCardTrigger asChild>\n                            <Card\n                              className={cn(\n                                \"border-l-4 max-w-[21rem] cursor-pointer transition-all hover:shadow-lg hover:scale-[1.02] focus:shadow-lg focus:scale-[1.02] focus:outline-none focus:ring-2 focus:ring-ring\",\n                                event.type && `border-l-[${typeColors[event.type]}]`,\n                                event.isChecked && \"bg-muted/10\"\n                              )}\n                              onClick={() => {\n                                setSelectedEvent(event);\n                                setEditedEvent({...event});\n                              }}\n                              role=\"button\"\n                              tabIndex={0}\n                              aria-label={`Event: ${event.title}, ${event.isChecked ? \"Completed\" : \"In Progress\"}`}\n                            >\n                              <CardContent className=\"p-4\">\n                                <div className=\"flex justify-between items-start mb-2\">\n                                  <h3 className=\"text-base font-semibold text-foreground truncate\">\n                                    {event.title}\n                                  </h3>\n                                  <Badge\n                                    variant={event.isChecked ? \"default\" : \"secondary\"}\n                                    className={cn(\n                                      \"ml-2 text-xs font-medium\",\n                                      event.isChecked\n                                        ? \"bg-[var(--chart-1)]/90\"\n                                        : \"bg-[var(--chart-3)]/20 text-[var(--chart-3)]\"\n                                    )}\n                                  >\n                                    {event.isChecked ? \"Done\" : \"Active\"}\n                                  </Badge>\n                                </div>\n                                <p className=\"text-sm text-muted-foreground/80 mb-1\">\n                                  Type: <span className=\"font-medium\">{event.type || \"N/A\"}</span>\n                                </p>\n                                <p className=\"text-sm text-muted-foreground/80 mb-2\">\n                                  Period: <span className=\"font-medium\">{event.period}</span>\n                                </p>\n                                <div className=\"flex items-center gap-2\">\n                                  <Avatar className=\"h-7 w-7 border border-border/50\">\n                                    <AvatarFallback className=\"bg-muted/30 text-foreground font-medium\">\n                                      {event.assignee[0]}\n                                    </AvatarFallback>\n                                  </Avatar>\n                                  <span className=\"text-sm text-muted-foreground/80 font-medium\">\n                                    {event.assignee}\n                                  </span>\n                                </div>\n                                {!event.isChecked && (\n                                  <Progress\n                                    value={50} // Mocked progress\n                                    className=\"mt-3 w-full [&>div]:bg-[color:var(--accent)]\"\n                                  />\n                                )}\n                              </CardContent>\n                            </Card>\n                          </HoverCardTrigger>\n                          <HoverCardContent className=\"w-80 bg-gradient-to-br from-card to-muted border-border/50\">\n                            <p className=\"text-base font-semibold text-foreground\">{event.title}</p>\n                            <p className=\"text-sm text-muted-foreground/80 mt-1\">\n                              {event.description}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground/80 mt-1\">\n                              Dependencies: {event.dependencies.join(\", \") || \"None\"}\n                            </p>\n                          </HoverCardContent>\n                        </HoverCard>\n                      </motion.div>\n                    ))\n                  )}\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          ))}\n        </motion.section>\n\n        {/* Event Details */}\n        {isMobile ? (\n          <Drawer\n            open={selectedEvent !== null}\n            onOpenChange={(open) => {\n              if (!open) {\n                setSelectedEvent(null);\n                setEditedEvent(null);\n              }\n            }}\n          >\n            <DrawerContent\n              className=\"rounded-t-[var(--radius)] bg-gradient-to-br from-card to-muted border-t border-border/50\">\n              <DrawerHeader>\n                <DrawerTitle className=\"text-xl font-semibold text-foreground\">\n                  {selectedEvent?.title || \"Event Details\"}\n                </DrawerTitle>\n              </DrawerHeader>\n              {selectedEvent && editedEvent && (\n                <div className=\"space-y-5 p-5\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex flex-col gap-2\">\n                      <Label htmlFor=\"title\" className=\"text-sm font-medium text-foreground\">\n                        Title\n                      </Label>\n                      <Input\n                        id=\"title\"\n                        value={editedEvent.title}\n                        onChange={(e) =>\n                          setEditedEvent({...editedEvent, title: e.target.value})\n                        }\n                        className=\"bg-background border-border/50 focus:ring-2 focus:ring-ring\"\n                      />\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Checkbox\n                        checked={editedEvent.isChecked}\n                        onCheckedChange={(checked) =>\n                          setEditedEvent({...editedEvent, isChecked: !!checked})\n                        }\n                        id=\"status\"\n                        className=\"h-5 w-5 border-border/50\"\n                      />\n                      <Label\n                        htmlFor=\"status\"\n                        className=\"text-sm font-medium text-foreground\"\n                      >\n                        {editedEvent.isChecked ? \"Completed\" : \"In Progress\"}\n                      </Label>\n                    </div>\n                  </div>\n                  <Separator className=\"bg-border/30\"/>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex flex-col gap-2\">\n                      <Label htmlFor=\"type\" className=\"text-sm font-medium text-foreground\">\n                        Type\n                      </Label>\n                      <Select\n                        value={editedEvent.type || \"N/A\"}\n                        onValueChange={(value) =>\n                          setEditedEvent({...editedEvent, type: value === \"N/A\" ? undefined : value})\n                        }\n                      >\n                        <SelectTrigger\n                          id=\"type\"\n                          className=\"bg-background border-border/50\"\n                        >\n                          <SelectValue/>\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"N/A\">N/A</SelectItem>\n                          {Object.keys(typeColors).map((type) => (\n                            <SelectItem key={type} value={type}>\n                              {type}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <p className=\"text-sm\">\n                      <strong className=\"text-foreground font-medium\">Period:</strong>{\" \"}\n                      <span className=\"text-muted-foreground/80\">{editedEvent.period}</span>\n                    </p>\n                    <div className=\"flex flex-col gap-2\">\n                      <Label\n                        htmlFor=\"assignee\"\n                        className=\"text-sm font-medium text-foreground\"\n                      >\n                        Assignee\n                      </Label>\n                      <Input\n                        id=\"assignee\"\n                        value={editedEvent.assignee}\n                        onChange={(e) =>\n                          setEditedEvent({...editedEvent, assignee: e.target.value})\n                        }\n                        className=\"bg-background border-border/50 focus:ring-2 focus:ring-ring\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col gap-2\">\n                    <Label\n                      htmlFor=\"description\"\n                      className=\"text-sm font-medium text-foreground\"\n                    >\n                      Description\n                    </Label>\n                    <Textarea\n                      id=\"description\"\n                      value={editedEvent.description}\n                      onChange={(e) =>\n                        setEditedEvent({...editedEvent, description: e.target.value})\n                      }\n                      className=\"min-h-[120px] bg-background border-border/50 focus:ring-2 focus:ring-ring text-foreground\"\n                    />\n                  </div>\n                  <div>\n                    <strong className=\"text-foreground text-sm font-medium\">Dependencies:</strong>\n                    {editedEvent.dependencies.length > 0 ? (\n                      <div className=\"flex flex-wrap gap-2 mt-2\">\n                        {editedEvent.dependencies.map((dep) => (\n                          <Badge\n                            key={dep}\n                            variant=\"outline\"\n                            className=\"bg-muted/20 text-muted-foreground/80 font-medium\"\n                          >\n                            {dep}\n                          </Badge>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-sm text-muted-foreground/80 mt-1 font-medium\">None</p>\n                    )}\n                  </div>\n                  <Button\n                    onClick={saveEditedEvent}\n                    className=\"w-full bg-[var(--chart-1)] hover:bg-[var(--chart-1)]/90 text-background\"\n                  >\n                    <Save className=\"h-4 w-4 mr-2\"/> Save Changes\n                  </Button>\n                </div>\n              )}\n            </DrawerContent>\n          </Drawer>\n        ) : (\n          <Dialog\n            open={selectedEvent !== null}\n            onOpenChange={(open) => {\n              if (!open) {\n                setSelectedEvent(null);\n                setEditedEvent(null);\n              }\n            }}\n          >\n            <DialogContent\n              className=\"rounded-[var(--radius)] bg-gradient-to-br from-card to-muted border border-border/50 max-w-lg\">\n              <DialogHeader>\n                <DialogTitle className=\"text-xl font-semibold text-foreground\">\n                  {selectedEvent?.title || \"Event Details\"}\n                </DialogTitle>\n              </DialogHeader>\n              {selectedEvent && editedEvent && (\n                <div className=\"space-y-5\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex flex-col gap-2\">\n                      <Label htmlFor=\"title\" className=\"text-sm font-medium text-foreground\">\n                        Title\n                      </Label>\n                      <Input\n                        id=\"title\"\n                        value={editedEvent.title}\n                        onChange={(e) =>\n                          setEditedEvent({...editedEvent, title: e.target.value})\n                        }\n                        className=\"bg-background border-border/50 focus:ring-2 focus:ring-ring\"\n                      />\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Checkbox\n                        checked={editedEvent.isChecked}\n                        onCheckedChange={(checked) =>\n                          setEditedEvent({...editedEvent, isChecked: !!checked})\n                        }\n                        id=\"status\"\n                        className=\"h-5 w-5 border-border/50\"\n                      />\n                      <Label\n                        htmlFor=\"status\"\n                        className=\"text-sm font-medium text-foreground\"\n                      >\n                        {editedEvent.isChecked ? \"Completed\" : \"In Progress\"}\n                      </Label>\n                    </div>\n                  </div>\n                  <Separator className=\"bg-border/30\"/>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex flex-col gap-2\">\n                      <Label htmlFor=\"type\" className=\"text-sm font-medium text-foreground\">\n                        Type\n                      </Label>\n                      <Select\n                        value={editedEvent.type || \"N/A\"}\n                        onValueChange={(value) =>\n                          setEditedEvent({...editedEvent, type: value === \"N/A\" ? undefined : value})\n                        }\n                      >\n                        <SelectTrigger\n                          id=\"type\"\n                          className=\"bg-background border-border/50\"\n                        >\n                          <SelectValue/>\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"N/A\">N/A</SelectItem>\n                          {Object.keys(typeColors).map((type) => (\n                            <SelectItem key={type} value={type}>\n                              {type}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <p className=\"text-sm\">\n                      <strong className=\"text-foreground font-medium\">Period:</strong>{\" \"}\n                      <span className=\"text-muted-foreground/80\">{editedEvent.period}</span>\n                    </p>\n                    <div className=\"flex flex-col gap-2\">\n                      <Label\n                        htmlFor=\"assignee\"\n                        className=\"text-sm font-medium text-foreground\"\n                      >\n                        Assignee\n                      </Label>\n                      <Input\n                        id=\"assignee\"\n                        value={editedEvent.assignee}\n                        onChange={(e) =>\n                          setEditedEvent({...editedEvent, assignee: e.target.value})\n                        }\n                        className=\"bg-background border-border/50 focus:ring-2 focus:ring-ring\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col gap-2\">\n                    <Label\n                      htmlFor=\"description\"\n                      className=\"text-sm font-medium text-foreground\"\n                    >\n                      Description\n                    </Label>\n                    <Textarea\n                      id=\"description\"\n                      value={editedEvent.description}\n                      onChange={(e) =>\n                        setEditedEvent({...editedEvent, description: e.target.value})\n                      }\n                      className=\"min-h-[120px] bg-background border-border/50 focus:ring-2 focus:ring-ring text-foreground\"\n                    />\n                  </div>\n                  <div>\n                    <strong className=\"text-foreground text-sm font-medium\">Dependencies:</strong>\n                    {editedEvent.dependencies.length > 0 ? (\n                      <div className=\"flex flex-wrap gap-2 mt-2\">\n                        {editedEvent.dependencies.map((dep) => (\n                          <Badge\n                            key={dep}\n                            variant=\"outline\"\n                            className=\"bg-muted/20 text-muted-foreground/80 font-medium\"\n                          >\n                            {dep}\n                          </Badge>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-sm text-muted-foreground/80 mt-1 font-medium\">None</p>\n                    )}\n                  </div>\n                  <Button\n                    onClick={saveEditedEvent}\n                    className=\"w-full bg-[var(--chart-1)] hover:bg-[var(--chart-1)]/90 text-background\"\n                  >\n                    <Save className=\"h-4 w-4 mr-2\"/> Save Changes\n                  </Button>\n                </div>\n              )}\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </TooltipProvider>\n  );\n}",
      "type": "registry:component",
      "target": "components/kanban-roadmap-timeline.tsx"
    }
  ]
}