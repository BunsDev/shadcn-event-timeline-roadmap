{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "horizontal-event-timeline-carousel",
  "type": "registry:block",
  "title": "Horizontal Event Timeline Carousel",
  "description": "shadcn/ui horizontal event timeline and roadmap carousel block",
  "registryDependencies": [
    "badge",
    "card"
  ],
  "files": [
    {
      "path": "src/app/horizontal/page.tsx",
      "content": "\"use client\";\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { motion, AnimatePresence, PanInfo } from \"framer-motion\";\nimport {\n  ChevronDown,\n  ChevronLeft,\n  ChevronRight,\n  Calendar,\n  CheckCircle,\n} from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { events } from \"@/data/events\";\n\ninterface EventTimelineCarouselProps {\n  height?: string;\n}\n\nexport default function HorizontalEventTimelineCarousel({\n  height = \"30rem\",\n}: EventTimelineCarouselProps) {\n  const [expandedIndex, setExpandedIndex] = useState<number | null>(null);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [expandedHeight, setExpandedHeight] = useState<number>(100);\n  const carouselRef = useRef<HTMLDivElement>(null);\n  const headerRef = useRef<HTMLDivElement>(null); // Ref for the header content\n\n  // Calculate expanded height based on total height minus header height\n  useEffect(() => {\n    if (carouselRef.current && headerRef.current) {\n      const totalHeight = carouselRef.current.getBoundingClientRect().height;\n      const headerHeight = headerRef.current.getBoundingClientRect().height;\n      // Calculate available space for expanded section\n      // Subtract header height and some padding (e.g., 20px) from total height\n      const availableHeight = totalHeight - headerHeight - 110;\n      setExpandedHeight(Math.max(availableHeight, 50)); // Ensure minimum height of 50px\n    }\n  }, [height]);\n\n  const toggleExpand = (index: number) => {\n    if (index === currentIndex) {\n      setExpandedIndex(expandedIndex === index ? null : index);\n    }\n  };\n\n  const formatPeriod = (item: (typeof events)[0]) => {\n    if (item.periodType === \"Q\") {\n      return `Q${item.periodNumber} ${item.year}`;\n    } else if (item.periodType === \"H\") {\n      return `H${item.periodNumber} ${item.year}`;\n    }\n    return `${item.year}`;\n  };\n\n  const nextSlide = () => {\n    setCurrentIndex((prev) => (prev === events.length - 1 ? 0 : prev + 1));\n    setExpandedIndex(null);\n  };\n\n  const prevSlide = () => {\n    setCurrentIndex((prev) => (prev === 0 ? events.length - 1 : prev - 1));\n    setExpandedIndex(null);\n  };\n\n  const goToSlide = (index: number) => {\n    setCurrentIndex(index);\n    setExpandedIndex(null);\n  };\n\n  const handleDragEnd = (\n    event: MouseEvent | TouchEvent | PointerEvent,\n    info: PanInfo,\n    index: number\n  ) => {\n    const SWIPE_THRESHOLD = 50;\n    if (info.offset.x > SWIPE_THRESHOLD && index === currentIndex) {\n      prevSlide();\n    } else if (info.offset.x < -SWIPE_THRESHOLD && index === currentIndex) {\n      nextSlide();\n    }\n  };\n\n  const cardVariants = {\n    active: {\n      x: 0,\n      scale: 1,\n      opacity: 1,\n      zIndex: 10,\n      transition: { duration: 0.3, ease: \"easeInOut\" },\n    },\n    inactive: {\n      scale: 0.9,\n      opacity: 0.7,\n      zIndex: 0,\n      transition: { duration: 0.3, ease: \"easeInOut\" },\n    },\n  };\n\n  return (\n    <div className=\"mx-auto px-4 py-12 max-w-7xl\">\n      <motion.h1\n        className=\"text-3xl md:text-4xl font-bold mb-2 text-center\"\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        Project Timeline\n      </motion.h1>\n\n      <motion.p\n        className=\"text-muted-foreground text-center\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5, delay: 0.2 }}\n      >\n        Our development journey and milestones\n      </motion.p>\n\n      <div className=\"relative\">\n        <button\n          onClick={prevSlide}\n          className=\"absolute left-0 top-1/2 -translate-y-1/2 z-20 bg-background p-2 rounded-full shadow-md hover:bg-primary/10 transition-colors\"\n        >\n          <ChevronLeft className=\"w-6 h-6\" />\n        </button>\n        <button\n          onClick={nextSlide}\n          className=\"absolute right-0 top-1/2 -translate-y-1/2 z-20 bg-background p-2 rounded-full shadow-md hover:bg-primary/10 transition-colors\"\n        >\n          <ChevronRight className=\"w-6 h-6\" />\n        </button>\n\n        <div className=\"absolute left-0 right-0 top-1/2 h-0.5 bg-primary/20 z-0\"></div>\n\n        <div\n          ref={carouselRef}\n          className=\"relative overflow-hidden touch-pan-x\"\n          style={{ height }}\n        >\n          <div className=\"flex h-full items-center justify-center\">\n            {events.map((item, index) => (\n              <motion.div\n                key={index}\n                className=\"absolute w-64 mx-4\"\n                variants={cardVariants}\n                initial=\"inactive\"\n                animate={index === currentIndex ? \"active\" : \"inactive\"}\n                style={{\n                  x: `${Math.round((index - currentIndex) * 300)}px`,\n                  willChange: \"transform\",\n                  transform: \"translateZ(0)\",\n                }}\n                drag=\"x\"\n                dragConstraints={{ left: -50, right: 50 }}\n                dragElastic={0.1}\n                onDragEnd={(e, info) => handleDragEnd(e, info, index)}\n              >\n                <motion.div\n                  variants={cardVariants}\n                  initial=\"inactive\"\n                  animate={index === currentIndex ? \"active\" : \"inactive\"}\n                  className={`absolute left-1/2 top-[-1rem] w-6 h-6 rounded-full transform -translate-x-1/2 z-10 ${\n                    index === currentIndex\n                      ? \"bg-primary\"\n                      : \"border-2 border-primary bg-transparent\"\n                  }`}\n                  style={{\n                    willChange: \"transform\",\n                    transform: \"translateZ(0)\",\n                  }}\n                />\n\n                <motion.div\n                  layout\n                  className=\"w-full\"\n                  transition={{ duration: 0.3, ease: \"easeInOut\" }}\n                >\n                  <Card className=\"overflow-hidden border-primary/10 shadow-lg hover:shadow-xl transition-shadow duration-300\">\n                    <CardContent className=\"p-0\">\n                      <div\n                        ref={index === 0 ? headerRef : null} // Measure first card's header\n                        className={`p-6 flex flex-col items-center text-center ${\n                          index === currentIndex\n                            ? \"cursor-pointer\"\n                            : \"cursor-default\"\n                        }`}\n                        onClick={() => toggleExpand(index)}\n                      >\n                        <Badge\n                          variant=\"outline\"\n                          className=\"text-sm py-1 px-3 bg-primary/5 border-primary/20 mb-2\"\n                        >\n                          <Calendar className=\"w-4 h-4 mr-1\" />\n                          {formatPeriod(item)}\n                        </Badge>\n                        <h3 className=\"text-xl font-bold text-primary\">\n                          {item.year} Milestones\n                        </h3>\n                        <p className=\"text-lg font-medium\">\n                          {item.periodType === \"Q\"\n                            ? `Quarter ${item.periodNumber}`\n                            : `Half ${item.periodNumber}`}\n                        </p>\n                        <div className=\"flex items-center text-sm text-muted-foreground mt-1\">\n                          <CheckCircle\n                            className={`w-4 h-4 mr-1 ${\n                              item.isChecked\n                                ? \"text-green-500\"\n                                : \"text-gray-400\"\n                            }`}\n                          />\n                          {item.isChecked ? \"Completed\" : \"Planned\"}\n                        </div>\n                        <motion.div\n                          animate={{\n                            rotate: expandedIndex === index ? 180 : 0,\n                            opacity: index === currentIndex ? 1 : 0.5,\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          <ChevronDown className=\"w-5 h-5 text-muted-foreground mt-2\" />\n                        </motion.div>\n                      </div>\n\n                      <AnimatePresence>\n                        {expandedIndex === index && index === currentIndex && (\n                          <motion.div\n                            initial={{ height: 0, opacity: 0 }}\n                            animate={{ height: expandedHeight, opacity: 1 }}\n                            exit={{ height: 0, opacity: 0 }}\n                            transition={{ duration: 0.3, ease: \"easeInOut\" }}\n                            className=\"overflow-y-auto\"\n                          >\n                            <div className=\"px-6 pb-6 pt-2 border-t border-border/50\">\n                              <div className=\"mb-4\">\n                                <h4 className=\"text-sm font-semibold flex items-center justify-center mb-2\">\n                                  Events\n                                </h4>\n                                <ul className=\"grid grid-cols-1 gap-2\">\n                                  {item.events.map((event, i) => (\n                                    <motion.li\n                                      key={i}\n                                      className=\"flex items-start\"\n                                      initial={{ opacity: 0, x: -20 }}\n                                      animate={{ opacity: 1, x: 0 }}\n                                      transition={{\n                                        duration: 0.3,\n                                        delay: i * 0.1,\n                                        ease: \"easeOut\",\n                                      }}\n                                    >\n                                      <CheckCircle\n                                        className={`w-4 h-4 mr-2 ${\n                                          event.isChecked\n                                            ? \"text-green-500\"\n                                            : \"text-gray-400\"\n                                        } mt-0.5 shrink-0`}\n                                      />\n                                      <span className=\"text-sm\">\n                                        {event.title}\n                                      </span>\n                                    </motion.li>\n                                  ))}\n                                </ul>\n                              </div>\n                            </div>\n                          </motion.div>\n                        )}\n                      </AnimatePresence>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"flex justify-center mt-8 gap-2\">\n          {events.map((_, index) => (\n            <button\n              key={index}\n              onClick={() => goToSlide(index)}\n              className={`w-3 h-3 rounded-full transition-colors ${\n                index === currentIndex ? \"bg-primary\" : \"bg-primary/20\"\n              }`}\n              aria-label={`Go to slide ${index + 1}`}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/horizontal-event-timeline-carousel.tsx"
    }
  ]
}